"""add fulltext search on product

Revision ID: 24282d6fb664
Revises: 2625497230bb
Create Date: 2025-10-26 14:43:48.245884

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "24282d6fb664"
down_revision: Union[str, Sequence[str], None] = "2625497230bb"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.execute("CREATE EXTENSION IF NOT EXISTS unaccent;")

    op.add_column(
        "product",
        sa.Column("search_vector", sa.dialects.postgresql.TSVECTOR(), nullable=True),
    )

    op.execute("""
        CREATE OR REPLACE FUNCTION product_search_vector_update()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.search_vector := 
                setweight(to_tsvector('french', unaccent(COALESCE(NEW.title, ''))), 'A') ||
                setweight(to_tsvector('simple', unaccent(COALESCE(NEW.brand, ''))), 'B') ||
                setweight(to_tsvector('simple', unaccent(COALESCE(NEW.merchant_name, ''))), 'C');
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql IMMUTABLE;
    """)

    op.execute("""
        CREATE TRIGGER product_search_vector_trigger
        BEFORE INSERT OR UPDATE OF title, brand, merchant_name
        ON product
        FOR EACH ROW
        EXECUTE FUNCTION product_search_vector_update();
    """)

    op.execute("""
        UPDATE product
        SET search_vector = 
            setweight(to_tsvector('french', unaccent(COALESCE(title, ''))), 'A') ||
            setweight(to_tsvector('simple', unaccent(COALESCE(brand, ''))), 'B') ||
            setweight(to_tsvector('simple', unaccent(COALESCE(merchant_name, ''))), 'C');
    """)

    op.alter_column("product", "search_vector", nullable=False)

    op.create_index(
        "idx_product_brand_lower",
        "product",
        [sa.literal_column("lower('brand')")],
        unique=False,
        postgresql_ops={"lower": "text_pattern_ops"},
    )
    op.create_index("idx_product_gtin", "product", ["gtin"], unique=False)
    op.create_index(
        "idx_product_merchant_lower",
        "product",
        [sa.literal_column("lower('merchant_name')")],
        unique=False,
        postgresql_ops={"lower": "text_pattern_ops"},
    )
    op.create_index("idx_product_mpn", "product", ["mpn"], unique=False)
    op.create_index(
        "idx_product_search_vector",
        "product",
        ["search_vector"],
        unique=False,
        postgresql_using="gin",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "idx_product_search_vector", table_name="product", postgresql_using="gin"
    )
    op.drop_index("idx_product_mpn", table_name="product")
    op.drop_index(
        "idx_product_merchant_lower",
        table_name="product",
        postgresql_ops={"lower": "text_pattern_ops"},
    )
    op.drop_index("idx_product_gtin", table_name="product")
    op.drop_index(
        "idx_product_brand_lower",
        table_name="product",
        postgresql_ops={"lower": "text_pattern_ops"},
    )
    op.drop_column("product", "search_vector")

    op.execute("DROP EXTENSION IF EXISTS unaccent;")
    # ### end Alembic commands ###
